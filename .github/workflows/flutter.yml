name: Flutter APK Build

on:
  push:
    branches:
      - flutter  # Trigger only for changes in the flutter branch
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Cache Flutter dependencies
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-flutter-dependencies-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-dependencies-

    # Set up Flutter SDK
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'

    # Install dependencies
    - name: Install dependencies
      run: flutter pub get

    # Extract and Increment Version
    - name: Extract and Increment Version
      id: versioning
      run: |
        VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f1)
        BUILD_NUMBER=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f2)
        NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
        NEW_VERSION="${VERSION}+${NEW_BUILD_NUMBER}"
        sed -i "s/version:.*/version: $NEW_VERSION/" pubspec.yaml
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Build Version: $NEW_VERSION"

    # Run tests (optional)
    - name: Run tests
      run: flutter test

    # Build APK with versioning
    - name: Build APK
      run: flutter build apk --debug

    # Upload APK to GitHub folder "APK BUILDS" with versioning
    - name: Upload APK with Versioning
      run: |
        mkdir -p APK_BUILDS
        mv build/app/outputs/flutter-apk/app-debug.apk APK_BUILDS/app-v${{ env.NEW_VERSION }}.apk

    # Set up SSH for EC2
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github-actions-key
        chmod 600 ~/.ssh/github-actions-key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Create Folder on EC2
    - name: Create Folder on EC2
      run: |
        ssh -i ~/.ssh/github-actions-key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/ubuntu/haider"

    # Transfer APK to EC2 Server with versioning
    - name: Transfer APK to EC2 Server
      run: |
        scp -i ~/.ssh/github-actions-key APK_BUILDS/app-v${{ env.NEW_VERSION }}.apk ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/haider
