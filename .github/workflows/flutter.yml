name: Flutter APK Build

on:
  push:
    branches:
      - flutter  # Trigger only for changes in the flutter branch
  workflow_dispatch:  # Allow manual triggering of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Cache Flutter dependencies
    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-flutter-dependencies-${{ hashFiles('**/pubspec.yaml') }}
        restore-keys: |
          ${{ runner.os }}-flutter-dependencies-
    
    # Set up Flutter SDK
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.16.0'

    # Install dependencies
    - name: Install dependencies
      run: flutter pub get

    # Extract, Increment, and Save Version
    - name: Extract and Increment Version
      id: versioning
      run: |
        VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f1)
        BUILD_NUMBER=$(grep 'version:' pubspec.yaml | awk '{print $2}' | cut -d '+' -f2)
        NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
        NEW_VERSION="${VERSION}+${NEW_BUILD_NUMBER}"
        sed -i "s/version:.*/version: $NEW_VERSION/" pubspec.yaml
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "Build Version: $NEW_VERSION"
    
    # Commit updated version to repo (using the personal access token)
    - name: Commit version change
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git remote set-url origin https://github.com/${{ github.repository }}
        git add pubspec.yaml
        git commit -m "Auto-increment build version to $NEW_VERSION"
        git push https://github.com/${{ github.repository }} HEAD:${{ github.ref }} 
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}  # Use the PAT for pushing changes

    # Build APK
    - name: Build APK
      run: flutter build apk --debug

    # Rename APK with versioning
    - name: Rename APK with Version
      run: mv build/app/outputs/flutter-apk/app-debug.apk "build/app/outputs/flutter-apk/app-v${{ env.NEW_VERSION }}.apk"

    # Set up SSH for EC2
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/github-actions-key
        chmod 600 ~/.ssh/github-actions-key
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Create Folder on EC2
    - name: Create Folder on EC2
      run: |
        ssh -i ~/.ssh/github-actions-key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p /home/ubuntu/haider/builds"

    # Transfer APK to EC2 Server with versioning
    - name: Transfer APK to EC2 Server
      run: |
        scp -i ~/.ssh/github-actions-key build/app/outputs/flutter-apk/app-v${{ env.NEW_VERSION }}.apk ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/haider/builds/
